openapi: 3.0.1
info:
  title: Google Maps Platform
  description: API Specification for Google Maps Platform
  version: 0.0.0
servers:
  - url: 'https://www.googleapis.com'
paths:
  /geolocation/v1/geolocate:
    post:
      servers:
        - url: 'https://www.googleapis.com'
      tags:
        - Geolocation API
      description: |-
        Geolocation API returns a location and accuracy radius based on information about cell towers and WiFi nodes that the mobile client can detect. This document describes the protocol used to send this data to the server and to return a response to the client.

        Communication is done over HTTPS using POST. Both request and response are formatted as JSON, and the content type of both is `application/json`.

        You must specify a key in your request, included as the value of a`key` parameter. A `key` is your application's  API key. This key identifies your application for purposes of quota management. Learn how to [get a key](https://developers.google.com/maps/documentation/geolocation/get-api-key).
      requestBody:
        description: The request body must be formatted as JSON.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GeolocationV1GeolocatePostRequestBody'
            examples:
              WIFI:
                value:
                  considerIp: 'false'
                  wifiAccessPoints:
                    - macAddress: '84:d4:7e:09:a5:f1'
                      signalStrength: -43
                      signalToNoiseRatio: 0
                    - macAddress: '44:48:c1:a6:f3:d0'
                      signalStrength: -55
                      signalToNoiseRatio: 0
              Cell Towers:
                value:
                  cellTowers:
                    - cellId: 170402199
                      locationAreaCode: 35632
                      mobileCountryCode: 310
                      mobileNetworkCode: 410
                      age: 0
                      signalStrength: -60
                      timingAdvance: 15
              IP Only:
                value:
                  considerIp: 'true'
        required: false
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeolocationV1GeolocatePostResponseBody'
              examples:
                WIFI:
                  value:
                    location:
                      lat: 37.421925
                      lng: -122.0841293
                    accuracy: 30
                Cell Towers:
                  value:
                    location:
                      lat: 37.780206299999996
                      lng: -122.41686869999998
                    accuracy: 1480
                IP Only:
                  value:
                    location:
                      lat: 37.7802545
                      lng: -122.41590829999998
                    accuracy: 926
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                Bad Request:
                  value:
                    error:
                      code: 400
                      message: 'Invalid value at ''cell_tower'' (type.googleapis.com/maps_api.CellTower), "foo"'
                      errors:
                        - message: 'Invalid value at ''cell_tower'' (type.googleapis.com/maps_api.CellTower), "foo"'
                          reason: invalid
                      status: INVALID_ARGUMENT
                Invalid Key:
                  value:
                    error:
                      code: 400
                      message: API key not valid. Please pass a valid API key.
                      errors:
                        - message: API key not valid. Please pass a valid API key.
                          domain: global
                          reason: badRequest
                      status: INVALID_ARGUMENT
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                Invalid:
                  value:
                    error:
                      code: 404
                      message: Not Found
                      errors:
                        - message: Not Found
                          domain: geolocation
                          reason: notFound
  /maps/api/elevation/json:
    get:
      servers:
        - url: 'https://maps.googleapis.com'
      tags:
        - Elevation API
      description: One of `path` or `locations` is **required.**
      parameters:
        - name: locations
          in: query
          style: pipeDelimited
          explode: false
          description: 'An array of comma separated {latitude,longitude} strings.'
          example:
            - '35,-100'
            - '40,-110'
          schema:
            $ref: '#/components/schemas/LatLngArrayString'
        - name: path
          in: query
          style: pipeDelimited
          explode: false
          description: 'An array of comma separated {latitude,longitude} strings.'
          example:
            - '35,-110'
            - '33,-110'
            - '31,-110'
          schema:
            $ref: '#/components/schemas/LatLngArrayString'
        - name: samples
          in: query
          description: Required if path parameter is set.
          schema:
            type: number
          example: 10
      responses:
        '200':
          description: Elevation Response
          content:
            application/json:
              examples:
                status = OK:
                  value:
                    results:
                      - elevation: 1643.880493164062
                        location:
                          lat: 35
                          lng: -110
                        resolution: 9.543951988220215
                      - elevation: 1748.557983398438
                        location:
                          lat: 31
                          lng: -110
                        resolution: 152.7032318115234
                    status: OK
              schema:
                type: object
                required:
                  - status
                properties:
                  error_message:
                    type: string
                    example: Invalid request. Invalid 'locations' parameter.
                  status:
                    $ref: '#/components/schemas/ElevationStatus'
                  results:
                    type: array
                    items:
                      type: object
                      properties:
                        elevation:
                          type: number
                        resolution:
                          type: number
                        location:
                          $ref: '#/components/schemas/LatLngLiteral'
  /maps/api/geocode/json:
    get:
      servers:
        - url: 'https://maps.googleapis.com'
      tags:
        - Geocode API
      description: One of `path` or `locations` is **required.**
      parameters:
        - $ref: '#/components/parameters/language'
        - $ref: '#/components/parameters/region'
        - name: address
          example: '1600 Amphitheatre+Parkway, Mountain View, CA'
          description: |-
            The street address that you want to geocode, in the format used by the national postal service of the country concerned. Additional address elements such as business names and unit, suite or floor numbers should be avoided.

            https://developers.google.com/maps/faq#geocoder_queryformat
          in: query
          schema:
            type: string
        - name: components
          style: pipeDelimited
          explode: false
          example:
            - 'street_number:1600'
            - 'route:Amphitheatre+Parkway'
            - 'locality:Mountain+View'
            - 'administrative_area_level_1:CA'
            - 'country:US'
          description: |-
            A components filter with elements separated by a pipe (|). The components filter is also accepted as an optional parameter if an address is provided. Each element in the components filter consists of a component:value pair, and fully restricts the results from the geocoder.

            https://developers.google.com/maps/documentation/geocoding/intro#ComponentFiltering
          in: query
          schema:
            items:
              type: string
            type: array
        - name: bounds
          description: |-
            The bounding box of the viewport within which to bias geocode results more prominently. This parameter will only influence, not fully restrict, results from the geocoder.  - name: locations
            in: query
          example:
            - '35,-100'
            - '40,-110'
          schema:
            $ref: '#/components/schemas/LatLngArrayString'
          in: query
      responses:
        '200':
          description: Elevation Response
          content:
            application/json:
              examples:
                status = OK:
                  value:
                    results:
                      - elevation: 1643.880493164062
                        location:
                          lat: 35
                          lng: -110
                        resolution: 9.543951988220215
                      - elevation: 1748.557983398438
                        location:
                          lat: 31
                          lng: -110
                        resolution: 152.7032318115234
                    status: OK
              schema:
                type: object
                required:
                  - status
                properties:
                  error_message:
                    type: string
                    example: Invalid request. Invalid 'locations' parameter.
                  status:
                    $ref: '#/components/schemas/ElevationStatus'
                  results:
                    type: array
                    items:
                      type: object
                      properties:
                        elevation:
                          type: number
                        resolution:
                          type: number
                        location:
                          $ref: '#/components/schemas/LatLngLiteral'
components:
  parameters:
    language:
      name: language
      in: query
      description: |-
        The language in which to return results.

        https://developers.google.com/maps/faq#languagesupport
      schema:
        type: string
        default: en
        enum:
          - ar
          - bg
          - bn
          - ca
          - cs
          - da
          - de
          - el
          - en
          - en-AU
          - en-GB
          - es
          - eu
          - fa
          - fi
          - fil
          - fr
          - gl
          - gu
          - hi
          - hr
          - hu
          - id
          - it
          - iw
          - ja
          - kn
          - ko
          - lt
          - lv
          - ml
          - mr
          - nl
          - 'no'
          - pl
          - pt
          - pt-BR
          - pt-PT
          - ro
          - ru
          - sk
          - sl
          - sr
          - sv
          - ta
          - te
          - th
          - tl
          - tr
          - uk
          - vi
          - zh-CN
          - zh-TW
    region:
      name: region
      in: query
      description: |-
        The region code, specified as a ccTLD ("top-level domain") two-character value.

        https://en.wikipedia.org/wiki/List_of_Internet_top-level_domains#Country_code_top-level_domains
      schema:
        type: string
        default: en
        enum:
          - ac
          - ad
          - ae
          - af
          - ag
          - ai
          - al
          - am
          - an
          - ao
          - aq
          - ar
          - as
          - at
          - au
          - aw
          - ax
          - az
          - ba
          - bb
          - bd
          - be
          - bf
          - bg
          - bh
          - bi
          - bj
          - bl
          - bm
          - bn
          - bo
          - bq
          - br
          - bs
          - bt
          - bv
          - bw
          - by
          - bz
          - ca
          - cc
          - cd
          - cf
          - cg
          - ch
          - ci
          - ck
          - cl
          - cm
          - cn
          - co
          - cr
          - cu
          - cv
          - cw
          - cx
          - cy
          - cz
          - de
          - dj
          - dk
          - dm
          - do
          - dz
          - ec
          - ee
          - eg
          - eh
          - er
          - es
          - et
          - eu
          - fi
          - fj
          - fk
          - fm
          - fo
          - fr
          - ga
          - gb
          - gd
          - ge
          - gf
          - gg
          - gh
          - gi
          - gl
          - gm
          - gn
          - gp
          - gq
          - gr
          - gs
          - gt
          - gu
          - gw
          - gy
          - hk
          - hm
          - hn
          - hr
          - ht
          - hu
          - id
          - ie
          - il
          - im
          - in
          - io
          - iq
          - ir
          - is
          - it
          - je
          - jm
          - jo
          - jp
          - ke
          - kg
          - kh
          - ki
          - km
          - kn
          - kp
          - kr
          - kw
          - ky
          - kz
          - la
          - lb
          - lc
          - li
          - lk
          - lr
          - ls
          - lt
          - lu
          - lv
          - ly
          - ma
          - mc
          - md
          - me
          - mf
          - mg
          - mh
          - mk
          - ml
          - mm
          - mn
          - mo
          - mp
          - mq
          - mr
          - ms
          - mt
          - mu
          - mv
          - mw
          - mx
          - my
          - mz
          - na
          - nc
          - ne
          - nf
          - ng
          - ni
          - nl
          - 'no'
          - np
          - nr
          - nu
          - nz
          - om
          - pa
          - pe
          - pf
          - pg
          - ph
          - pk
          - pl
          - pm
          - pn
          - pr
          - ps
          - pt
          - pw
          - py
          - qa
          - re
          - ro
          - rs
          - ru
          - rw
          - sa
          - sb
          - sc
          - sd
          - se
          - sg
          - sh
          - si
          - sj
          - sk
          - sl
          - sm
          - sn
          - so
          - sr
          - ss
          - st
          - su
          - sv
          - sx
          - sy
          - sz
          - tc
          - td
          - tf
          - tg
          - th
          - tj
          - tk
          - tl
          - tm
          - tn
          - to
          - tp
          - tr
          - tt
          - tv
          - tw
          - tz
          - ua
          - ug
          - uk
          - um
          - us
          - uy
          - uz
          - va
          - vc
          - ve
          - vg
          - vi
          - vn
          - vu
          - wf
          - ws
          - ye
          - yt
          - za
          - zm
          - zw
  schemas:
    ElevationStatus:
      type: string
      description: Status codes returned by service.
      enum:
        - OK
        - INVALID_REQUEST
    GeocodeStatus:
      type: string
      description: Status codes returned by service.
      enum:
        - OK
        - INVALID_REQUEST
    LatLngArrayString:
      description: 'An array of comma separated {latitude,longitude} strings.'
      example:
        - '35,-100'
        - '40,-110'
      type: array
      items:
        type: string
        minItems: 2
    LatLngLiteral:
      type: object
      title: LatLng Literal
      description: An object describing a specific location with Latitude and Longitude in decimal degrees.
      required:
        - lat
        - lng
      properties:
        lat:
          type: number
          description: Latitude in decimal degrees
        lng:
          type: number
          description: Longitude in decimal degrees
    GeolocationV1GeolocatePostRequestBody:
      type: object
      title: Geolocation Request Body
      description: 'The request body must be formatted as JSON. The following fields are supported, and all fields are optional.'
      properties:
        homeMobileCountryCode:
          type: integer
          description: The cell tower's Mobile Country Code (MCC).
        homeMobileNetworkCode:
          type: integer
          description: The cell tower's Mobile Network Code. This is the MNC for GSM and WCDMA; CDMA uses the System ID (SID).
        radioType:
          type: string
          description: 'The mobile radio type. Supported values are lte, gsm, cdma, and wcdma. While this field is optional, it should be included if a value is available, for more accurate results.'
        carrier:
          type: string
          description: The carrier name.
        considerIp:
          type: string
          description: Specifies whether to fall back to IP geolocation if wifi and cell tower signals are not available. Defaults to true. Set considerIp to false to disable fall back.
        cellTowers:
          type: array
          description: The request body's cellTowers array contains zero or more cell tower objects.
          items:
            $ref: '#/components/schemas/CellTower'
        wifiAccessPoints:
          type: array
          description: An array of two or more WiFi access point objects.
          items:
            $ref: '#/components/schemas/WifiAccessPoint'
    GeolocationV1GeolocatePostResponseBody:
      type: object
      title: Geolocation Response Body
      description: A successful geolocation request will return a JSON-formatted response defining a location and radius.
      required:
        - location
        - accuracy
      properties:
        location:
          description: 'The user’s estimated latitude and longitude, in degrees.'
          $ref: '#/components/schemas/LatLngLiteral'
        accuracy:
          description: 'The accuracy of the estimated location, in meters. This represents the radius of a circle around the given `location`. If your Geolocation response shows a very high value in the `accuracy` field, the service may be geolocating based on the  request IP, instead of WiFi points or cell towers. This can happen if no cell towers or access points are valid or recognized. To confirm that this is the issue, set `considerIp` to `false` in your request. If the response is a `404`, you''ve confirmed that your `wifiAccessPoints` and `cellTowers` objects could not be geolocated.'
          type: number
      example:
        location:
          lat: 37.421925
          lng: -122.0841293
        accuracy: 30
    CellTower:
      type: object
      title: Cell Tower
      description: 'Attributes used to describe a cell tower. The following optional fields are not currently used, but may be included if values are available: `age`, `signalStrength`, `timingAdvance`.'
      required:
        - cellId
        - locationAreaCode
        - mobileCountryCode
        - mobileNetworkCode
      properties:
        cellId:
          description: 'Unique identifier of the cell. On GSM, this is the Cell ID (CID); CDMA networks use the Base Station ID (BID). WCDMA networks use the UTRAN/GERAN Cell Identity (UC-Id), which is a 32-bit value concatenating the Radio Network Controller (RNC) and Cell ID. Specifying only the 16-bit Cell ID value in WCDMA networks may return inaccurate results.'
          type: integer
        locationAreaCode:
          description: The Location Area Code (LAC) for GSM and WCDMA networks. The Network ID (NID) for CDMA networks.
          type: integer
        mobileCountryCode:
          description: The cell tower's Mobile Country Code (MCC).
          type: integer
        mobileNetworkCode:
          description: The cell tower's Mobile Network Code. This is the MNC for GSM and WCDMA; CDMA uses the System ID (SID).
          type: integer
        age:
          description: 'The number of milliseconds since this cell was primary. If age is 0, the cellId represents a current measurement.'
          type: integer
        signalStrength:
          description: Radio signal strength measured in dBm.
          type: number
        timingAdvance:
          description: The timing advance value.
          type: number
      example:
        cellTowers:
          - cellId: 170402199
            locationAreaCode: 35632
            mobileCountryCode: 310
            mobileNetworkCode: 410
            age: 0
            signalStrength: -60
            timingAdvance: 15
    WifiAccessPoint:
      type: object
      title: WiFi Access Point
      description: Attributes used to describe a WiFi access point.
      required:
        - macAddress
      properties:
        macAddress:
          description: 'The MAC address of the WiFi node. It''s typically called a BSS, BSSID or MAC address. Separators must be `:` (colon).'
          type: string
        signalStrength:
          description: The current signal strength measured in dBm.
          type: integer
        signalToNoiseRatio:
          description: The current signal to noise ratio measured in dB.
          type: integer
        age:
          description: The number of milliseconds since this access point was detected.
          type: integer
        channel:
          description: The channel over which the client is communication with the access point.
          type: integer
      example:
        considerIp: 'false'
        wifiAccessPoints:
          - macAddress: '84:d4:7e:09:a5:f1'
            signalStrength: -43
            signalToNoiseRatio: 0
          - macAddress: '44:48:c1:a6:f3:d0'
            signalStrength: -55
            signalToNoiseRatio: 0
    ErrorResponse:
      type: object
      title: Error Response
      description: 'In the case of an error, a standard format error response body will be returned and the HTTP status code will be set to an error status. The response contains an object with a single error object.'
      required:
        - error
      properties:
        error:
          description: An error return by the server.
          $ref: '#/components/schemas/ErrorObject'
      example:
        error:
          code: 400
          message: API key not valid. Please pass a valid API key.
          errors:
            - message: API key not valid. Please pass a valid API key.
              domain: global
              reason: badRequest
          status: INVALID_ARGUMENT
    ErrorObject:
      type: object
      title: Error Object
      required:
        - code
        - message
        - errors
      properties:
        code:
          description: This is the same as the HTTP status of the response.
          type: number
        message:
          description: A short description of the error.
          type: string
        errors:
          description: A list of errors which occurred. Each error contains an identifier for the type of error and a short description.
          type: array
          items:
            $ref: '#/components/schemas/ErrorDetail'
    ErrorDetail:
      type: object
      title: Error Detail
      required:
        - reason
        - message
      properties:
        message:
          description: A short description of the error.
          type: string
        reason:
          type: string
          description: A reason for the error.
          enum:
            - badRequest
            - dailyLimitExceeded
            - invalid
            - keyInvalid
            - notFound
            - parseError
            - userRateLimitExceeded
        domain:
          type: string
          description: The domain in which the error occurred.
          enum:
            - global
            - geolocation
            - usageLimits
      example:
        message: API key not valid. Please pass a valid API key.
        domain: global
        reason: badRequest
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: query
      name: key
security:
  - ApiKeyAuth: []
tags:
  - name: Elevation API
    description: 'The Elevation API provides a simple interface to query locations on the earth for elevation data. Additionally, you may request sampled elevation data along paths, allowing you to calculate elevation changes along routes.'
    externalDocs:
      url: 'https://developers.google.com/maps/documentation/elevation/overview'
  - name: Geocode API
    description: The Geocoding API is a service that provides geocoding and reverse geocoding of addresses.
    externalDocs:
      url: 'https://developers.google.com/maps/documentation/geocoding/overview'
  - name: Geolocation API
    description: The Geolocation API returns a location and accuracy radius based on information about cell towers and WiFi nodes that the mobile client can detect.
    externalDocs:
      url: 'https://developers.google.com/maps/documentation/geolocation/overview'
