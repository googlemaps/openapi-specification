# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

servers:
  - url: https://maps.googleapis.com
tags:
  - Directions API
description: The Directions API is a web service that uses an HTTP request to return JSON or XML-formatted directions between locations. You can receive directions for several modes of transportation, such as transit, driving, walking, or cycling.
parameters:
  - name: origin
    description: |
      The place ID, address, or textual latitude/longitude value from which you wish to calculate directions/
      * Place IDs must be prefixed with place_id:. You can retrieve place IDs from the Geocoding API and the Places API (including Place Autocomplete). For an example using place IDs from Place Autocomplete, see Place Autocomplete and Directions. For more about place IDs, see the Place ID overview.
        `origin=place_id:ChIJ3S-JXmauEmsRUcIaWtf4MzE`
      * If you pass an address, the Directions service geocodes the string and converts it to a latitude/longitude coordinate to calculate directions. This coordinate may be different from that returned by the Geocoding API, for example a building entrance rather than its center.
        `origin=24+Sussex+Drive+Ottawa+ON`
        Using place IDs is preferred over using addresses or latitude/longitude coordinates. Using coordinates will always result in the point being snapped to the road nearest to those coordinates - which may not be an access point to the property, or even a road that will quickly or safely lead to the destination.
      * If you pass coordinates, the point will snap to the nearest road. Passing a place ID is preferred. If you do pass coordinates, ensure that no space exists between the latitude and longitude values.
        `origin=41.43206,-81.38992`
      * Plus codes must be formatted as a global code or a compound code. Format plus codes as shown here (plus signs are url-escaped to %2B and spaces are url-escaped to %20). Global code is a 4 character area code and 6 character or longer local code (849VCWC8+R9 is 849VCWC8%2BR9). Compound code is a 6 character or longer local code with an explicit location (CWC8+R9 Mountain View, CA, USA is CWC8%2BR9%20Mountain%20View%20CA%20USA).
    required: true
    in: query
    example: Vancouver, BC
    schema:
      type: string
  - name: destination
    description: "The place ID, address, or textual latitude/longitude value to which you wish to calculate directions. The options for the destination parameter are the same as for the origin parameter."
    required: true
    in: query
    example: "Victoria, BC"
    schema:
      type: string
  - name: mode
    description: |
      When you calculate directions, you may specify the transportation mode to use. By default, directions are calculated as driving directions. If you set the mode to transit you can optionally specify either a departure_time or an arrival_time. If neither time is specified, the departure_time defaults to now (that is, the departure time defaults to the current time).
    in: query
    schema:
      $ref: "../schemas/TravelMode.yml"
  - name: waypoints
    description: |
      Specifies an array of intermediate locations to include along the route between the origin and destination points as pass through or stopover locations. Waypoints alter a route by directing it through the specified location(s). The API supports waypoints for these travel modes: driving, walking and bicycling; not transit. You can specify waypoints using the following values:
      * Place ID: The unique value specific to a location (ChIJGwVKWe5w44kRcr4b9E25-Go).
      * Address string (Charlestown, Boston,MA)
      * Latitude/longitude coordinates (lat/lng): an explicit value pair. (-34.92788%2C138.60008 comma, no space)
      * Encoded polyline that can be specified by a set of any of the above. (enc:lexeF{~wsZejrPjtye@:)
    in: query
    schema:
      type: string
  - name: alternatives
    description: |
      If set to true, specifies that the Directions service may provide more than one route alternative in the response. Note that providing route alternatives may increase the response time from the server. This is only available for requests without intermediate waypoints.
    in: query
    schema:
      type: boolean
  - name: avoid
    description: |
      Indicates that the calculated route(s) should avoid the indicated features. This parameter supports the following arguments:
      * `tolls` indicates that the calculated route should avoid toll roads/bridges.
      * `highways` indicates that the calculated route should avoid highways.
      * `ferries` indicates that the calculated route should avoid ferries.
      * `indoor` indicates that the calculated route should avoid indoor steps for walking and transit directions.
    in: query
    example: highways
    schema:
      type: string
      enum:
        - tolls
        - highways
        - ferries
        - indoor
  - "$ref": "../parameters/language.yml"
  - "$ref": "../parameters/region.yml"
  - name: units
    description: |
      Specifies the unit system to use when displaying results.

      Directions results contain text within distance fields that may be displayed to the user to indicate the distance of a particular "step" of the route. By default, this text uses the unit system of the origin's country or region.

      For example, a route from "Chicago, IL" to "Toronto, ONT" will display results in miles, while the reverse route will display results in kilometers. You may override this unit system by setting one explicitly within the request's units parameter, passing one of the following values:

      * `metric` specifies usage of the metric system. Textual distances are returned using kilometers and meters.
      * `imperial` specifies usage of the Imperial (English) system. Textual distances are returned using miles and feet.

      Note: this unit system setting only affects the text displayed within distance fields. The distance fields also contain values which are always expressed in meters.
    example: metric
    in: query
    schema:
      type: string
      enum:
        - imperial
        - metric
  - name: arrival_time
    description: |
      Specifies the desired time of arrival for transit directions, in seconds since midnight, January 1, 1970 UTC. You can specify either `departure_time` or `arrival_time`, but not both. Note that `arrival_time` must be specified as an integer.
    in: query
    schema:
      type: number
  - name: departure_time
    description: |
      Specifies the desired time of departure. You can specify the time as an integer in seconds since midnight, January 1, 1970 UTC. If a departure_time later than 9999-12-31T23:59:59.999999999Z is specified, the API will fall back the departure_time to 9999-12-31T23:59:59.999999999Z. Alternatively, you can specify a value of now, which sets the departure time to the current time (correct to the nearest second). The departure time may be specified in two cases:
      * For requests where the travel mode is transit: You can optionally specify one of departure_time or arrival_time. If neither time is specified, the departure_time defaults to now (that is, the departure time defaults to the current time).
      * For requests where the travel mode is driving: You can specify the departure_time to receive a route and trip duration (response field: duration_in_traffic) that take traffic conditions into account. The departure_time must be set to the current time or some time in the future. It cannot be in the past.

      Note: If departure time is not specified, choice of route and duration are based on road network and average time-independent traffic conditions. Results for a given request may vary over time due to changes in the road network, updated average traffic conditions, and the distributed nature of the service. Results may also vary between nearly-equivalent routes at any time or frequency.
    in: query
    schema:
      type: number
  - name: traffic_model
    description: |
      Specifies the assumptions to use when calculating time in traffic. This setting affects the value returned in the duration_in_traffic field in the response, which contains the predicted time in traffic based on historical averages. The traffic_model parameter may only be specified for driving directions where the request includes a departure_time. The available values for this parameter are:
      * `best_guess` (default) indicates that the returned duration_in_traffic should be the best estimate of travel time given what is known about both historical traffic conditions and live traffic. Live traffic becomes more important the closer the departure_time is to now.
      * `pessimistic` indicates that the returned duration_in_traffic should be longer than the actual travel time on most days, though occasional days with particularly bad traffic conditions may exceed this value.
      * `optimistic` indicates that the returned duration_in_traffic should be shorter than the actual travel time on most days, though occasional days with particularly good traffic conditions may be faster than this value.
      The default value of `best_guess` will give the most useful predictions for the vast majority of use cases. It is possible the `best_guess` travel time prediction may be shorter than `optimistic`, or alternatively, longer than `pessimistic`, due to the way the `best_guess` prediction model integrates live traffic information.
    in: query
    example: pessimistic
    schema:
      type: string
      default: best_guess
      enum:
        - best_guess
        - pessimistic
        - optimistic
  - name: transit_mode
    description: |
      Specifies one or more preferred modes of transit. This parameter may only be specified for transit directions. The parameter supports the following arguments:
      * `bus` indicates that the calculated route should prefer travel by bus.
      * `subway` indicates that the calculated route should prefer travel by subway.
      * `train` indicates that the calculated route should prefer travel by train.
      * `tram` indicates that the calculated route should prefer travel by tram and light rail.
      * `rail` indicates that the calculated route should prefer travel by train, tram, light rail, and subway. This is equivalent to `transit_mode=train|tram|subway`.
    in: query
    example: train|tram|subway
    schema:
      type: string
  - name: transit_routing_preference
    description: |
      Specifies preferences for transit routes. Using this parameter, you can bias the options returned, rather than accepting the default best route chosen by the API. This parameter may only be specified for transit directions. The parameter supports the following arguments:
      * `less_walking` indicates that the calculated route should prefer limited amounts of walking.
      * `fewer_transfers` indicates that the calculated route should prefer a limited number of transfers.
    in: query
    example: less_walking
    schema:
      type: string
      enum:
        - less_walking
        - fewer_transfers
responses:
  "200":
    description: Response for the Distance Matrix API query.
    content:
      application/json:
        examples:
          boston_concord_waypoints_now_response:
            value:
              $ref: "../responses/maps_http_directions_boston_concord_waypoints_now_response.yml"
          boston_concord_waypoints_response:
            value:
              $ref: "../responses/maps_http_directions_boston_concord_waypoints_response.yml"
          boston_concord_waypoints_via_response:
            value:
              $ref: "../responses/maps_http_directions_boston_concord_waypoints_via_response.yml"
          brooklyn_queens_transit_departure_time_response:
            value:
              $ref: "../responses/maps_http_directions_brooklyn_queens_transit_departure_time_response.yml"
          brooklyn_queens_transit_response:
            value:
              $ref: "../responses/maps_http_directions_brooklyn_queens_transit_response.yml"
          chicago_los_angeles_response:
            value:
              $ref: "../responses/maps_http_directions_chicago_los_angeles_response.yml"
          disneyland_response:
            value:
              $ref: "../responses/maps_http_directions_disneyland_response.yml"
          placed_id_response:
            value:
              $ref: "../responses/maps_http_directions_placed_id_response.yml"
          plus_codes_response:
            value:
              $ref: "../responses/maps_http_directions_plus_codes_response.yml"
          region_toledo_default_response:
            value:
              $ref: "../responses/maps_http_directions_region_toledo_default_response.yml"
          region_toledo_es_response:
            value:
              $ref: "../responses/maps_http_directions_region_toledo_es_response.yml"
          sydney_perth_waypoints_latlng_response:
            value:
              $ref: "../responses/maps_http_directions_sydney_perth_waypoints_latlng_response.yml"
          sydney_perth_waypoints_polyline_response:
            value:
              $ref: "../responses/maps_http_directions_sydney_perth_waypoints_polyline_response.yml"
          toronto_montreal_bicycling_response:
            value:
              $ref: "../responses/maps_http_directions_toronto_montreal_bicycling_response.yml"
          toronto_montreal_response:
            value:
              $ref: "../responses/maps_http_directions_toronto_montreal_response.yml"
          waypoints_optimize_response:
            value:
              $ref: "../responses/maps_http_directions_waypoints_optimize_response.yml"
        schema:
          $ref: "../schemas/DirectionsResponse.yml"
