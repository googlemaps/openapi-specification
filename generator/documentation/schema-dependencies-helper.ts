/**
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { isArray, isRef, sortSchemaProperties } from "./helpers";

import { OpenAPIV3 } from "openapi-types";
import { options } from "yargs";
import { readFileSync } from "fs";

const argv = options({
  schema: {
    type: "string",
    demandOption: true,
  },
  spec: {
    type: "string",
    demandOption: true,
  },
}).argv;

const refToSchemaKey = (ref: string): string => {
  // @ts-ignore
  return ref.split("\\").pop().split("/").pop().split(".")[0];
};

const traverse = (schema: OpenAPIV3.SchemaObject, spec: OpenAPIV3.Document) => {
  const names = [schema.title];
  if (schema.type == "object") {
    return names
      .concat(
        Object.keys(schema.properties!)
          .sort(sortSchemaProperties(schema))
          .map((key: string) => {
            const property = schema.properties![key];
            if (isRef(property)) {
              const name = refToSchemaKey(property["$ref"]);

              return traverse(
                spec.components!.schemas![name] as OpenAPIV3.SchemaObject,
                spec
              );
            }
            if (isArray(property)) {
              const ref = property.items;

              if (isRef(ref)) {
                const name = refToSchemaKey(ref.$ref);

                return traverse(
                  spec.components!.schemas![name] as OpenAPIV3.SchemaObject,
                  spec
                );
              }
              return [];
            }
            return [];
          })
      )
      .flat();
  }
  return names;
};

const main = async (argv: any) => {
  const spec = JSON.parse(
    readFileSync(argv.spec).toString()
  ) as OpenAPIV3.Document;

  console.log(
    `{# Generated by: bazel run generator/documentation:schema-dependencies-helper -- --schema ${argv.schema} #}`
  );
  console.log(
    [
      ...new Set(
        traverse(
          spec.components!.schemas![argv.schema] as OpenAPIV3.SchemaObject,
          spec
        )
      ),
    ]
      .map(
        (name: any) =>
          `{{ http.documentation("maps_http_schema_${name.toLowerCase()}", type="schemas") }}`
      )
      .join("\n")
  );
};

main(argv);
